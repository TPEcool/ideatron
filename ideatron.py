genres = ("Sandbox","Real-time strategy","First-person shooter","Third person shooter","Simulator","Puzzle game","Action","Action-Adventure","Adventure","Survival","Platformer","Horror","Psychological horror","Sports","Party game","Role-playing game (RPG)","Point and Click")
subgenres = ("Sandbox","Real-time strategy","First-person shooter","Third person shooter","Simulator","Puzzle game","Action","Action-Adventure","Adventure","Survival","Platformer","Horror","Psychological horror","Sports","Party game","Role-playing game (RPG)","Point and Click","Rage game","Story game","Hard game")
soundtrack = ("Simple/8bit (square wave + sine)","Ambient/Dark ambient","Calm BG","Space-y","Fast-paced","Dynamic-paced")
characters = ("A person","A camera in the skies","An alien","An animal","A robot","A moving piece of geometry (e.g. square)")
gametypes = ("Open-world","Restricted","Randomized Open-world","Randomized Restricted")

import tkinter as tk
import tkinter.messagebox as msg
import random as rd
import tkinter.filedialog as fs
import os
from os import path
import sys

version = "1"
year = "2023"

app = tk.Tk()

def clamp(i,d,u):
    if i<d:
        return d
    elif i>u:
        return u
    else:
        return i

app.resizable(False,False)
app.geometry("450x100")
app.title("Ideatron v."+version)
app.iconphoto(False,tk.PhotoImage(file='ideatron.png'))

class game:
    def __init__(self,genre,subgenre,music,char,gtype):
        self.genre = genre
        self.subgenre = subgenre
        self.soundtrack = music
        self.character = char
        self.game_type = gtype

global idea
idea = game("","","","","")

def ask_save(idea):
    response = msg.askquestion(title="Save results?",message="Would you like to save the results?")
    if response == 'yes':
        file=fs.asksaveasfile(title="Save Ideatron game idea",mode='w',initialdir=os.path.realpath(__file__)+"/saves",parent=app,initialfile="Ideatron save.txt",defaultextension=".txt")
        if file != None:
            file.write("Genre: "+idea.genre+"\r\nSubgenre: "+idea.subgenre+"\r\nSoundtrack type: "+idea.soundtrack+"\r\nCharacter type: "+idea.character+"\r\nGame type: "+idea.game_type+"\r\r - Generated by Ideatron v."+version+"\rIteration count: "+str(clamp(int(iterations.get()),1,2500))+"\rSeed:"+seed.get())
            print("Save operation done!")
        
def gen():
    idea = game("","","","","")
    print("Generating game idea...")
    for i in range(0,clamp(int(iterations.get()),1,2500)):
        print("Beginning iteration "+str(i+1)+"...")
        idea = game(rd.choice(genres),rd.choice(subgenres),rd.choice(soundtrack),rd.choice(characters),rd.choice(gametypes))
        print("Iteration "+str(i+1)+" complete!")
    print("Random iterations complete!")
    inf = msg.showinfo(title="Generation results",message="Genre: "+idea.genre+"\r\nSubgenre: "+idea.subgenre+"\r\nSoundtrack type: "+idea.soundtrack+"\r\nCharacter type: "+idea.character+"\r\nGame type: "+idea.game_type)
    if inf=='ok':
        ask_save(idea)

def setSeed():
    rd.seed(seed.get())

def about():
    msg.showinfo(title="About Ideatron v."+version,message="Ideatron v."+version+"\r\nCreated in "+year+" by electrovoyage#9148.\r\n"+str(len(genres)+len(subgenres)+len(soundtrack)+len(characters)+len(gametypes))+" options total.")

def listOpt():
    q = msg.askquestion(title="Export generatable options?",message="Would you like to save all generatable options into '/[app folder]/options_exported.txt'?")
    if q=='yes':
        with open("options_exported.txt",'w') as opt:
            print("Beggining exportable option save function...")
            opt.write("Genres:\r")
            for i in genres:
                print("Writing genre "+i+"... ["+str(genres.index(i)+1)+"/"+str(len(genres))+"]")
                opt.write(" - "+i+"\r")
            opt.write("\rSubgenres:\r")
            for i in subgenres:
                print("Writing subgenre "+i+"... ["+str(subgenres.index(i)+1)+"/"+str(len(subgenres))+"]")
                opt.write(" - "+i+"\r")
            opt.write("\rSoundtrack types:\r")
            for i in soundtrack:
                print("Writing soundtrack type "+i+"... ["+str(soundtrack.index(i)+1)+"/"+str(len(soundtrack))+"]")
                opt.write(" - "+i+"\r")
            opt.write("\rCharacters:\r")
            for i in characters:
                print("Writing character "+i+"... ["+str(characters.index(i)+1)+"/"+str(len(characters))+"]")
                opt.write(" - "+i+"\r")
            opt.write("\rGame types:\r")
            for i in gametypes:
                print("Writing game type "+i+"... ["+str(gametypes.index(i)+1)+"/"+str(len(gametypes))+"]")
                opt.write(" - "+i+"\r")
            opt.write("\rExported from Ideatron v."+version)
            opt.close()

spin_var = tk.StringVar(app)
spin_var.set("0")
                
genBtn = tk.Button(app,text="Generate",command=gen)
genBtn.grid(row=2,column=1,pady=2,padx=20)

listBtn = tk.Button(app,text="List options",command=listOpt)
listBtn.grid(row=2,column=0,pady=2,padx=20)

tk.Label(text="Iterations").grid(row=0,column=0,pady=0,padx=20)

iterations = tk.Spinbox(from_=1,to=2500)
iterations.grid(row=1,column=0,pady=2,padx=20)

ui_menu = tk.Menu(app,tearoff=False)
app.config(menu=ui_menu)
fileMenu = tk.Menu(ui_menu, tearoff=False)
ui_menu.add_cascade(label = "File", menu = fileMenu)
fileMenu.add_command(label = "About Ideatron v."+version+"...",command = about)
fileMenu.add_command(label="Quit",command = sys.exit)

tk.Label(text="Random seed").grid(row=0,column=2,pady=0,padx=20)
seed = tk.Spinbox(from_=-10000,to=10000,textvariable = spin_var)
seed.grid(row=1,column=2,padx=20,pady=2)
setSeedBtn = tk.Button(app,text="Set seed",command = setSeed)
setSeedBtn.grid(row=2,column=2,padx=20,pady=5)

tk.mainloop()
